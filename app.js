const tg = window.Telegram.WebApp;
tg.expand();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
let userData = {
    stars: localStorage.getItem('stars') ? parseInt(localStorage.getItem('stars')) : 1000,
    inventory: JSON.parse(localStorage.getItem('inventory')) || []
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–≤—É–∫–æ–≤
const bgMusic = new Audio('sounds/music.mp3');
const spinSound = new Audio('sounds/open_ruletka.mp3');
const winSound = new Audio('sounds/done_ruletka.mp3');
let isMusicOn = true;

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
function updateBalance() {
    document.getElementById('stars').textContent = userData.stars;
}

// –î–∞–Ω–Ω—ã–µ –∫–µ–π—Å–æ–≤
const cases = {
    "–û–±—ã—á–Ω—ã–π": {
        price: 100,
        items: [
            { name: "–û–±—ã—á–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ 1", image: "https://i.yapx.ru/aGMei.png", probability: 0.5 },
            { name: "–û–±—ã—á–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ 2", image: "https://i.yapx.ru/aGTXO.png", probability: 0.3 },
            { name: "–†–µ–¥–∫–∏–π –ø–æ–¥–∞—Ä–æ–∫", image: "https://i.yapx.ru/aGMcn.png", probability: 0.15 },
            { name: "–≠–ø–∏—á–µ—Å–∫–∏–π –ø–æ–¥–∞—Ä–æ–∫", image: "https://i.yapx.ru/aGMe8.png", probability: 0.05 }
        ]
    },
    "–†–µ–¥–∫–∏–π": {
        price: 250,
        items: [
            { name: "–†–µ–¥–∫–∏–π –ø–æ–¥–∞—Ä–æ–∫ 1", image: "https://i.yapx.ru/aGTWw.png", probability: 0.6 },
            { name: "–†–µ–¥–∫–∏–π –ø–æ–¥–∞—Ä–æ–∫ 2", image: "https://i.yapx.ru/aGMaI.png", probability: 0.25 },
            { name: "–≠–ø–∏—á–µ—Å–∫–∏–π –ø–æ–¥–∞—Ä–æ–∫", image: "https://i.yapx.ru/aGTV1.png", probability: 0.1 },
            { name: "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫", image: "https://i.yapx.ru/aGTXI.png", probability: 0.05 }
        ]
    },
    "–≠–ø–∏—á–µ—Å–∫–∏–π": {
        price: 500,
        items: [
            { name: "–≠–ø–∏—á–µ—Å–∫–∏–π –ø–æ–¥–∞—Ä–æ–∫ 1", image: "https://i.yapx.ru/aGMLa.png", probability: 0.55 },
            { name: "–≠–ø–∏—á–µ—Å–∫–∏–π –ø–æ–¥–∞—Ä–æ–∫ 2", image: "https://i.yapx.ru/aGMe1.png", probability: 0.3 },
            { name: "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫", image: "https://i.yapx.ru/aGMfO.png", probability: 0.1 },
            { name: "–ú–∏—Ñ–∏—á–µ—Å–∫–∏–π –ø–æ–¥–∞—Ä–æ–∫", image: "https://i.yapx.ru/aGTXD.png", probability: 0.05 }
        ]
    },
    "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π": {
        price: 1000,
        items: [
            { name: "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ 1", image: "https://i.yapx.ru/aGMgI.png", probability: 0.6 },
            { name: "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ 2", image: "https://i.yapx.ru/aGMff.png", probability: 0.25 },
            { name: "–ú–∏—Ñ–∏—á–µ—Å–∫–∏–π –ø–æ–¥–∞—Ä–æ–∫", image: "https://i.yapx.ru/aGTXV.png", probability: 0.1 },
            { name: "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫", image: "https://i.yapx.ru/aGTXY.png", probability: 0.05 }
        ]
    },
    "–ú–∏—Ñ–∏—á–µ—Å–∫–∏–π": {
        price: 2500,
        items: [
            { name: "–ú–∏—Ñ–∏—á–µ—Å–∫–∏–π –ø–æ–¥–∞—Ä–æ–∫ 1", image: "https://i.yapx.ru/aGTWa.png", probability: 0.5 },
            { name: "–ú–∏—Ñ–∏—á–µ—Å–∫–∏–π –ø–æ–¥–∞—Ä–æ–∫ 2", image: "https://i.yapx.ru/aGTWD.png", probability: 0.3 },
            { name: "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫", image: "https://i.yapx.ru/aGMfS.png", probability: 0.15 },
            { name: "–ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫", image: "https://i.yapx.ru/aGTXA.png", probability: 0.05 }
        ]
    }
};

let currentCaseType = null;
let isSpinning = false;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫
document.addEventListener('DOMContentLoaded', function() {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–≤—É–∫–æ–≤
    bgMusic.loop = true;
    bgMusic.volume = 0.3;
    spinSound.volume = 0.7;
    winSound.volume = 0.7;

    // –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Ñ–æ–Ω–æ–≤–æ–π –º—É–∑—ã–∫–∏
    const playPromise = bgMusic.play();
    if (playPromise !== undefined) {
        playPromise.catch(error => {
            console.log("–ê–≤—Ç–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –º—É–∑—ã–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ");
            isMusicOn = false;
            document.getElementById('music-toggle').classList.add('muted');
            document.getElementById('music-toggle').textContent = 'üîá';
        });
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –º—É–∑—ã–∫–∏
    document.getElementById('music-toggle').addEventListener('click', toggleMusic);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–æ–≤
    document.querySelectorAll('.open-btn').forEach(btn => {
        btn.addEventListener('click', function(e) {
            e.stopPropagation();
            const caseElement = this.closest('.case');
            currentCaseType = caseElement.getAttribute('data-type');
            openCaseView(currentCaseType);
        });
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ö—Ä—É—Ç–∏—Ç—å"
    document.getElementById('spin-btn').addEventListener('click', spinRoulette);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –Ω–∞–∑–∞–¥
    document.getElementById('back-btn').addEventListener('click', backToCases);
    document.getElementById('back-inventory-btn').addEventListener('click', backToCases);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    document.getElementById('inventory-btn').addEventListener('click', showInventory);
});

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º—É–∑—ã–∫–∏
function toggleMusic() {
    isMusicOn = !isMusicOn;
    const musicBtn = document.getElementById('music-toggle');
    
    if (isMusicOn) {
        bgMusic.play();
        musicBtn.textContent = 'üîä';
        musicBtn.classList.remove('muted');
    } else {
        bgMusic.pause();
        musicBtn.textContent = 'üîá';
        musicBtn.classList.add('muted');
    }
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–µ–π—Å–∞
function openCaseView(type) {
    document.querySelector('.cases-container').style.display = 'none';
    document.getElementById('case-view').style.display = 'block';
    document.getElementById('inventory-btn').style.display = 'none';
    
    const caseData = cases[type];
    document.getElementById('case-title').textContent = type + ' –∫–µ–π—Å';
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –∫–µ–π—Å–∞ –≤ –ø—Ä–µ–≤—å—é
    const caseItemsPreview = document.getElementById('case-items-preview');
    caseItemsPreview.innerHTML = '';
    
    caseData.items.forEach(item => {
        const previewItem = document.createElement('div');
        previewItem.className = 'preview-item';
        previewItem.innerHTML = `
            <img src="${item.image}" alt="${item.name}">
            <p>${item.name}</p>
        `;
        caseItemsPreview.appendChild(previewItem);
    });
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ä—É–ª–µ—Ç–∫—É
    prepareRoulette(type);
}

// –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä—É–ª–µ—Ç–∫–∏
function prepareRoulette(type) {
    const roulette = document.getElementById('roulette');
    const resultDiv = document.getElementById('result');
    const spinBtn = document.getElementById('spin-btn');
    
    roulette.innerHTML = '';
    resultDiv.innerHTML = '';
    spinBtn.disabled = false;
    
    const caseData = cases[type];
    
    // –°–æ–∑–¥–∞–µ–º –≤–∑–≤–µ—à–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è —Ä—É–ª–µ—Ç–∫–∏
    const weightedItems = [];
    caseData.items.forEach(item => {
        const count = Math.floor(item.probability * 100);
        for (let i = 0; i < count; i++) {
            weightedItems.push(item);
        }
    });
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ä—É–ª–µ—Ç–∫—É
    weightedItems.forEach(item => {
        const itemElement = document.createElement('div');
        itemElement.className = 'roulette-item';
        itemElement.innerHTML = `
            <img src="${item.image}" alt="${item.name}">
            <p>${item.name}</p>
        `;
        roulette.appendChild(itemElement);
    });
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Ä—É–ª–µ—Ç–∫–∏
    const itemWidth = 100;
    const rouletteWidth = weightedItems.length * itemWidth;
    roulette.style.width = `${rouletteWidth}px`;
}

// –ó–∞–ø—É—Å–∫ —Ä—É–ª–µ—Ç–∫–∏
function spinRoulette() {
    if (isSpinning) return;
    
    const caseData = cases[currentCaseType];
    
    if (userData.stars < caseData.price) {
        alert(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Stars! –ù—É–∂–Ω–æ ${caseData.price}, —É –≤–∞—Å ${userData.stars}`);
        return;
    }
    
    // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –≤—Ä–∞—â–µ–Ω–∏—è
    spinSound.currentTime = 0;
    spinSound.play().catch(e => console.error("–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞:", e));
    
    const roulette = document.getElementById('roulette');
    const spinBtn = document.getElementById('spin-btn');
    const itemWidth = 100;
    
    isSpinning = true;
    spinBtn.disabled = true;
    
    let startPosition = 0;
    const spinDuration = 8000; // 8 —Å–µ–∫—É–Ω–¥
    const startTime = Date.now();
    const rouletteWidth = roulette.children.length * itemWidth;
    const targetDistance = 3000 + 5000 * Math.random();
    
    function animate() {
        const currentTime = Date.now();
        const elapsed = currentTime - startTime;
        const progress = Math.min(elapsed / spinDuration, 1);
        
        // –ü–ª–∞–≤–Ω–æ–µ –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ
        const easeOut = 1 - Math.pow(1 - progress, 4);
        const currentPosition = targetDistance * easeOut;
        
        roulette.style.transform = `translateX(-${currentPosition}px)`;
        
        // –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É–º–µ–Ω—å—à–∞–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å –∑–≤—É–∫–∞ –≤—Ä–∞—â–µ–Ω–∏—è
        if (progress > 0.7) {
            spinSound.volume = 0.7 * (1 - (progress - 0.7) / 0.3);
        }
        
        if (progress < 1) {
            requestAnimationFrame(animate);
        } else {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç
            const finalPosition = currentPosition % rouletteWidth;
            const itemIndex = Math.floor(finalPosition / itemWidth);
            const weightedItems = getWeightedItems(currentCaseType);
            const prize = weightedItems[itemIndex % weightedItems.length];
            
            finishSpin(prize);
            isSpinning = false;
        }
    }
    
    animate();
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∑–≤–µ—à–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
function getWeightedItems(type) {
    const caseData = cases[type];
    const weightedItems = [];
    
    caseData.items.forEach(item => {
        const count = Math.floor(item.probability * 100);
        for (let i = 0; i < count; i++) {
            weightedItems.push(item);
        }
    });
    
    return weightedItems;
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏
function finishSpin(prize) {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–≤—É–∫ –≤—Ä–∞—â–µ–Ω–∏—è
    spinSound.pause();
    spinSound.volume = 0.7;
    
    // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –≤—ã–∏–≥—Ä—ã—à–∞
    winSound.currentTime = 0;
    winSound.play().catch(e => console.error("–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞:", e));
    
    const caseData = cases[currentCaseType];
    
    // –í—ã—á–∏—Ç–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
    userData.stars -= caseData.price;
    localStorage.setItem('stars', userData.stars);
    updateBalance();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
    userData.inventory.push(prize);
    localStorage.setItem('inventory', JSON.stringify(userData.inventory));
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const resultDiv = document.getElementById('result');
    resultDiv.innerHTML = `
        <div class="prize-result">
            <h3>üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!</h3>
            <img src="${prize.image}" alt="${prize.name}">
            <p>${prize.name}</p>
        </div>
    `;
    
    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
    resultDiv.scrollIntoView({ behavior: 'smooth' });
}

// –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –∫–µ–π—Å–æ–≤
function backToCases() {
    document.querySelector('.cases-container').style.display = 'grid';
    document.getElementById('case-view').style.display = 'none';
    document.getElementById('inventory-view').style.display = 'none';
    document.getElementById('inventory-btn').style.display = 'block';
}

// –ü–æ–∫–∞–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
function showInventory() {
    document.querySelector('.cases-container').style.display = 'none';
    document.getElementById('case-view').style.display = 'none';
    document.getElementById('inventory-view').style.display = 'block';
    document.getElementById('inventory-btn').style.display = 'none';
    
    const inventoryContent = document.getElementById('inventory-content');
    
    if (userData.inventory.length === 0) {
        inventoryContent.innerHTML = '<p class="empty-inventory">–í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç</p>';
        return;
    }
    
    let inventoryHTML = "<div class='inventory-grid'>";
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
    const itemsCount = {};
    userData.inventory.forEach(item => {
        itemsCount[item.name] = (itemsCount[item.name] || 0) + 1;
    });
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º
    for (const [name, count] of Object.entries(itemsCount)) {
        const item = userData.inventory.find(i => i.name === name);
        inventoryHTML += `
            <div class="inventory-item">
                <img src="${item.image}" alt="${name}">
                <p>${name} √ó${count}</p>
            </div>
        `;
    }
    
    inventoryHTML += "</div>";
    inventoryContent.innerHTML = inventoryHTML;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
updateBalance();