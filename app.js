const tg = window.Telegram.WebApp;
tg.expand();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
let userData = {
    stars: localStorage.getItem('stars') ? parseInt(localStorage.getItem('stars')) : 1000,
    inventory: JSON.parse(localStorage.getItem('inventory')) || []
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
function updateBalance() {
    document.getElementById('stars').textContent = userData.stars;
}

// –î–∞–Ω–Ω—ã–µ –∫–µ–π—Å–æ–≤
const cases = {
    "–û–±—ã—á–Ω—ã–π": {
        price: 100,
        items: [
            { name: "–û–±—ã—á–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ 1", image: "https://i.yapx.ru/aGMLa.png", probability: 0.5 },
            { name: "–û–±—ã—á–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ 2", image: "https://i.yapx.ru/aGMLa.png", probability: 0.3 },
            { name: "–†–µ–¥–∫–∏–π –ø–æ–¥–∞—Ä–æ–∫", image: "https://i.yapx.ru/aGMLa.png", probability: 0.15 },
            { name: "–≠–ø–∏—á–µ—Å–∫–∏–π –ø–æ–¥–∞—Ä–æ–∫", image: "https://i.yapx.ru/aGMLa.png", probability: 0.05 }
        ]
    },
    "–†–µ–¥–∫–∏–π": {
        price: 250,
        items: [
            { name: "–†–µ–¥–∫–∏–π –ø–æ–¥–∞—Ä–æ–∫ 1", image: "https://i.yapx.ru/aGMLa.png", probability: 0.6 },
            { name: "–†–µ–¥–∫–∏–π –ø–æ–¥–∞—Ä–æ–∫ 2", image: "https://i.yapx.ru/aGMLa.png", probability: 0.25 },
            { name: "–≠–ø–∏—á–µ—Å–∫–∏–π –ø–æ–¥–∞—Ä–æ–∫", image: "https://i.yapx.ru/aGMLa.png", probability: 0.1 },
            { name: "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫", image: "https://i.yapx.ru/aGMLa.png", probability: 0.05 }
        ]
    },
    "–≠–ø–∏—á–µ—Å–∫–∏–π": {
        price: 500,
        items: [
            { name: "–≠–ø–∏—á–µ—Å–∫–∏–π –ø–æ–¥–∞—Ä–æ–∫ 1", image: "https://i.yapx.ru/aGMLa.png", probability: 0.55 },
            { name: "–≠–ø–∏—á–µ—Å–∫–∏–π –ø–æ–¥–∞—Ä–æ–∫ 2", image: "https://i.yapx.ru/aGMLa.png", probability: 0.3 },
            { name: "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫", image: "https://i.yapx.ru/aGMLa.png", probability: 0.1 },
            { name: "–ú–∏—Ñ–∏—á–µ—Å–∫–∏–π –ø–æ–¥–∞—Ä–æ–∫", image: "https://i.yapx.ru/aGMLa.png", probability: 0.05 }
        ]
    },
    "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π": {
        price: 1000,
        items: [
            { name: "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ 1", image: "https://i.yapx.ru/aGMLa.png", probability: 0.6 },
            { name: "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ 2", image: "https://i.yapx.ru/aGMLa.png", probability: 0.25 },
            { name: "–ú–∏—Ñ–∏—á–µ—Å–∫–∏–π –ø–æ–¥–∞—Ä–æ–∫", image: "https://i.yapx.ru/aGMLa.png", probability: 0.1 },
            { name: "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫", image: "https://i.yapx.ru/aGMLa.png", probability: 0.05 }
        ]
    },
    "–ú–∏—Ñ–∏—á–µ—Å–∫–∏–π": {
        price: 2500,
        items: [
            { name: "–ú–∏—Ñ–∏—á–µ—Å–∫–∏–π –ø–æ–¥–∞—Ä–æ–∫ 1", image: "https://i.yapx.ru/aGMLa.png", probability: 0.5 },
            { name: "–ú–∏—Ñ–∏—á–µ—Å–∫–∏–π –ø–æ–¥–∞—Ä–æ–∫ 2", image: "https://i.yapx.ru/aGMLa.png", probability: 0.3 },
            { name: "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫", image: "https://i.yapx.ru/aGMLa.png", probability: 0.15 },
            { name: "–ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫", image: "https://i.yapx.ru/aGMLa.png", probability: 0.05 }
        ]
    }
};

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞
function openCase(type) {
    const caseData = cases[type];
    
    if (userData.stars < caseData.price) {
        alert(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Stars! –ù—É–∂–Ω–æ ${caseData.price}, —É –≤–∞—Å ${userData.stars}`);
        return;
    }

    const roulette = document.getElementById("roulette");
    const resultDiv = document.getElementById("result");
    const rouletteContainer = document.getElementById("roulette-container");
    
    roulette.innerHTML = "";
    resultDiv.innerHTML = "";
    rouletteContainer.style.display = "block";

    // –°–æ–∑–¥–∞–µ–º –≤–∑–≤–µ—à–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    const weightedItems = [];
    caseData.items.forEach(item => {
        const count = Math.floor(item.probability * 100);
        for (let i = 0; i < count; i++) {
            weightedItems.push(item);
        }
    });

    // –ê–Ω–∏–º–∞—Ü–∏—è —Ä—É–ª–µ—Ç–∫–∏
    let counter = 0;
    const spinDuration = 10000; // 10 —Å–µ–∫—É–Ω–¥
    const startTime = Date.now();
    let lastFrameTime = 0;
    
    function spin() {
        const currentTime = Date.now();
        const elapsed = currentTime - startTime;
        const progress = Math.min(elapsed / spinDuration, 1);
        
        // –ó–∞–º–µ–¥–ª–µ–Ω–∏–µ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º
        const speed = 1 - progress * 0.9;
        
        if (currentTime - lastFrameTime > 100 * speed) {
            roulette.innerHTML = "";
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º 3 –ø—Ä–µ–¥–º–µ—Ç–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
            for (let i = 0; i < 3; i++) {
                const idx = (counter + i) % weightedItems.length;
                const item = document.createElement("div");
                item.className = "roulette-item";
                item.innerHTML = `
                    <img src="${weightedItems[idx].image}" alt="${weightedItems[idx].name}">
                    <p>${weightedItems[idx].name}</p>
                `;
                roulette.appendChild(item);
            }
            
            counter++;
            lastFrameTime = currentTime;
        }
        
        if (progress < 1) {
            requestAnimationFrame(spin);
        } else {
            finishSpin(type, weightedItems);
        }
    }
    
    spin();
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏
function finishSpin(type, weightedItems) {
    const caseData = cases[type];
    
    // –í—ã—á–∏—Ç–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
    userData.stars -= caseData.price;
    localStorage.setItem('stars', userData.stars);
    updateBalance();
    
    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–∏–∑
    const randomIndex = Math.floor(Math.random() * weightedItems.length);
    const prize = weightedItems[randomIndex];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
    userData.inventory.push(prize);
    localStorage.setItem('inventory', JSON.stringify(userData.inventory));
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const resultDiv = document.getElementById("result");
    resultDiv.innerHTML = `
        <div class="prize-result">
            <h3>üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!</h3>
            <img src="${prize.image}" alt="${prize.name}">
            <p>${prize.name}</p>
            <button onclick="showInventory()">–ú–æ–∏ –ø–æ–¥–∞—Ä–∫–∏ (${userData.inventory.length})</button>
        </div>
    `;
    
    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
    resultDiv.scrollIntoView({ behavior: 'smooth' });
}

// –ü–æ–∫–∞–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
function showInventory() {
    const resultDiv = document.getElementById("result");
    const rouletteContainer = document.getElementById("roulette-container");
    
    rouletteContainer.style.display = "none";
    
    if (userData.inventory.length === 0) {
        resultDiv.innerHTML = "<p>–í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç</p>";
        return;
    }
    
    let inventoryHTML = "<h3>üì¶ –í–∞—à–∏ –ø–æ–¥–∞—Ä–∫–∏:</h3><div class='inventory-grid'>";
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
    const itemsCount = {};
    userData.inventory.forEach(item => {
        itemsCount[item.name] = (itemsCount[item.name] || 0) + 1;
    });
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º
    for (const [name, count] of Object.entries(itemsCount)) {
        const item = userData.inventory.find(i => i.name === name);
        inventoryHTML += `
            <div class="inventory-item">
                <img src="${item.image}" alt="${name}">
                <p>${name} √ó${count}</p>
            </div>
        `;
    }
    
    inventoryHTML += "</div>";
    resultDiv.innerHTML = inventoryHTML;
    resultDiv.scrollIntoView({ behavior: 'smooth' });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
updateBalance();